**************************************Inorder Tree***********************************

void inOrder(struct Node *root) 
{ 
    stack<Node *> s; 
    Node *curr = root; 
  
    while (curr != NULL || s.empty() == false) 
    { 
        /* Reach the left most Node of the 
           curr Node */
        while (curr !=  NULL) 
        { 
            /* place pointer to a tree node on 
               the stack before traversing 
              the node's left subtree */
            s.push(curr); 
            curr = curr->left; 
        } 
  
        /* Current must be NULL at this point */
        curr = s.top(); 
        s.pop(); 
  
        cout << curr->data << " "; 
  
        /* we have visited the node and its 
           left subtree.  Now, it's right 
           subtree's turn */
        curr = curr->right; 
  
    } /* end of while */
} 

********************************Postorder traversal ********************************

void postorder(struct Node* head) 
{ 
    struct Node* temp = head; 
    unordered_set<Node*> visited; 
    while (temp && visited.find(temp) == visited.end()) { 
  
        // Visited left subtree 
        if (temp->left &&  
         visited.find(temp->left) == visited.end()) 
            temp = temp->left; 
  
        // Visited right subtree 
        else if (temp->right &&  
        visited.find(temp->right) == visited.end()) 
            temp = temp->right; 
  
        // Print node 
        else { 
            printf("%d ", temp->data); 
            visited.insert(temp); 
            temp = head; 
        } 
    } 
} 
  
struct Node* newNode(int data) 
{ 
    struct Node* node = new Node; 
    node->data = data; 
    node->left = NULL; 
    node->right = NULL; 
    return (node); 
} 


************************************************Preorder Traversal*************************

void iterativePreorder(node* root) 
{ 
    // Base Case 
    if (root == NULL) 
        return; 
  
    // Create an empty stack and push root to it 
    stack<node*> nodeStack; 
    nodeStack.push(root); 
  
    /* Pop all items one by one. Do following for every popped item 
       a) print it 
       b) push its right child 
       c) push its left child 
    Note that right child is pushed first so that left is processed first */
    while (nodeStack.empty() == false) { 
        // Pop the top item from stack and print it 
        struct node* node = nodeStack.top(); 
        printf("%d ", node->data); 
        nodeStack.pop(); 
  
        // Push right and left children of the popped node to stack 
        if (node->right) 
            nodeStack.push(node->right); 
        if (node->left) 
            nodeStack.push(node->left); 
    } 
} 

*********************************************************************************************************************************************
